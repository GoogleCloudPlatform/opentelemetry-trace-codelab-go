// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: shakesapp.proto

package shakesapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShakespeareServiceClient is the client API for ShakespeareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShakespeareServiceClient interface {
	// Accepts a query string and returns the number of lines containing that.
	GetMatchCount(ctx context.Context, in *ShakespeareRequest, opts ...grpc.CallOption) (*ShakespeareResponse, error)
}

type shakespeareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShakespeareServiceClient(cc grpc.ClientConnInterface) ShakespeareServiceClient {
	return &shakespeareServiceClient{cc}
}

func (c *shakespeareServiceClient) GetMatchCount(ctx context.Context, in *ShakespeareRequest, opts ...grpc.CallOption) (*ShakespeareResponse, error) {
	out := new(ShakespeareResponse)
	err := c.cc.Invoke(ctx, "/shakesapp.ShakespeareService/GetMatchCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShakespeareServiceServer is the server API for ShakespeareService service.
// All implementations must embed UnimplementedShakespeareServiceServer
// for forward compatibility
type ShakespeareServiceServer interface {
	// Accepts a query string and returns the number of lines containing that.
	GetMatchCount(context.Context, *ShakespeareRequest) (*ShakespeareResponse, error)
	mustEmbedUnimplementedShakespeareServiceServer()
}

// UnimplementedShakespeareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShakespeareServiceServer struct {
}

func (UnimplementedShakespeareServiceServer) GetMatchCount(context.Context, *ShakespeareRequest) (*ShakespeareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchCount not implemented")
}
func (UnimplementedShakespeareServiceServer) mustEmbedUnimplementedShakespeareServiceServer() {}

// UnsafeShakespeareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShakespeareServiceServer will
// result in compilation errors.
type UnsafeShakespeareServiceServer interface {
	mustEmbedUnimplementedShakespeareServiceServer()
}

func RegisterShakespeareServiceServer(s grpc.ServiceRegistrar, srv ShakespeareServiceServer) {
	s.RegisterService(&ShakespeareService_ServiceDesc, srv)
}

func _ShakespeareService_GetMatchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShakespeareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakespeareServiceServer).GetMatchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shakesapp.ShakespeareService/GetMatchCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakespeareServiceServer).GetMatchCount(ctx, req.(*ShakespeareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShakespeareService_ServiceDesc is the grpc.ServiceDesc for ShakespeareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShakespeareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shakesapp.ShakespeareService",
	HandlerType: (*ShakespeareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchCount",
			Handler:    _ShakespeareService_GetMatchCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shakesapp.proto",
}
